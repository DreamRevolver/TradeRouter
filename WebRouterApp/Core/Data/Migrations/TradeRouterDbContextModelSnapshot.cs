// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebRouterApp.Core.Data;

namespace WebRouterApp.Core.Data.Migrations
{
    [DbContext(typeof(TradeRouterDbContext))]
    partial class TradeRouterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("WebRouterApp.Features.Auth.Application.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReplacedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserRecordId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserRecordId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("WebRouterApp.Features.Publishers.Application.Models.PublisherRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiSecret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TradeAllOrdersAsMarket")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9787c27-a4ae-488b-905b-2d58bb02c4af"),
                            ApiKey = "d270a941bc83bc337b475c755d9b99ce8374dd30f18d9c77d0fd758dff09d926",
                            ApiSecret = "66ce28d2575e329f9fdfed24b9d2620b90278d5faecf8b01625601f4bd7cb884",
                            Description = "",
                            Name = "7amuil",
                            TradeAllOrdersAsMarket = false
                        });
                });

            modelBuilder.Entity("WebRouterApp.Features.Subscribers.Application.Models.SubscriberRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiSecret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CoeffKind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Multiplier")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TradeKind")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Subscribers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3799db3f-16f0-4a4f-8bd1-7d8e054f9f8b"),
                            ApiKey = "3329ec7ae6bdffea7de1dd19a67a0b574f7a553c8e870bf9e062521e552b5615",
                            ApiSecret = "eec08f26c98eb96268cc813afa159570c4441b490a3c72df85121b4baeab3a0b",
                            CoeffKind = 0,
                            Description = "Every Tom",
                            Multiplier = 1.0,
                            Name = "Tom",
                            TradeKind = 0
                        },
                        new
                        {
                            Id = new Guid("e6ba2381-d4f3-4dad-88a0-e470a0f60377"),
                            ApiKey = "a552521f2823e6583418462ff8e9d094ac6dda958bea017863f88d82908ea691",
                            ApiSecret = "6a6bd42fb8f3d956f6642962be712cc015d1736eebcb48cd2e974a7833a430af",
                            CoeffKind = 0,
                            Description = "Every Dick",
                            Multiplier = 1.0,
                            Name = "Dick",
                            TradeKind = 0
                        },
                        new
                        {
                            Id = new Guid("2b389379-4aa3-481b-b54e-05156ba6be8c"),
                            ApiKey = "9cbca5494d0e66652aa933dfd16585e46ebb488ee10ea528f3be7684739ad4df",
                            ApiSecret = "50611c69847096dca50e1eaef774f884e593f30ccd82f4249fcc743e9b479a75",
                            CoeffKind = 0,
                            Description = "Every user1",
                            Multiplier = 1.0,
                            Name = "user1@zgmd.onmicrosoft.com",
                            TradeKind = 0
                        },
                        new
                        {
                            Id = new Guid("a2ef6e28-343d-4be2-86c2-bc235693f512"),
                            ApiKey = "186f0d31c9b33a1426a5b2c70d7703e87c3a3704f947f2c2815a9e9194601bfa",
                            ApiSecret = "a8b90468eaf611228f2174a5eadbd1f1d0b9a8cb0f03e3be36ba425acc2978e2",
                            CoeffKind = 0,
                            Description = "Every user2",
                            Multiplier = 1.0,
                            Name = "user2@zgmd.onmicrosoft.com",
                            TradeKind = 0
                        });
                });

            modelBuilder.Entity("WebRouterApp.Features.Users.Application.Models.UserRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38fec690-e4e6-4ec9-97db-b4259609b8a8"),
                            FirstName = "Satoshi",
                            LastName = "Nakamoto",
                            PasswordHash = new byte[] { 124, 245, 125, 93, 118, 88, 51, 236, 133, 238, 63, 30, 84, 186, 136, 69, 37, 161, 221, 251, 16, 46, 92, 201, 240, 197, 47, 146, 111, 114, 146, 184, 180, 46, 241, 29, 78, 182, 169, 167, 103, 194, 243, 252, 184, 77, 34, 80, 27, 120, 36, 208, 10, 60, 0, 188, 114, 58, 145, 211, 58, 142, 120, 210 },
                            Salt = new byte[] { 144, 140, 73, 103, 32, 178, 155, 64, 170, 207, 153, 54, 214, 3, 106, 21 },
                            Username = "satoshi"
                        });
                });

            modelBuilder.Entity("WebRouterApp.Features.Auth.Application.Models.RefreshToken", b =>
                {
                    b.HasOne("WebRouterApp.Features.Users.Application.Models.UserRecord", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserRecordId");
                });

            modelBuilder.Entity("WebRouterApp.Features.Users.Application.Models.UserRecord", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
